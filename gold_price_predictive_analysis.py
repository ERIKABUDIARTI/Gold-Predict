# -*- coding: utf-8 -*-
"""Gold Price - Predictive Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y_vU5FOJvXYLhT5WSFS1rUDg10N_5DT8

# **Laporan Proyek Machine Learning**

Proyek Predictive Analysis: **Gold Price Prediction Dataset**
- Nama:**ERIKA BUDIARTI**
- Email: erika.analytic@gmail.com
- Id Dicoding:erika_budiarti

# **Data Preprocessing**

**Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""**Load Data**"""

gold_data = pd.read_csv('/content/gld_price_data.csv')
gold_data

"""Klik link untuk download dataset:  
https://www.kaggle.com/datasets/altruistdelhite04/gold-price-data

**Menampilkan jumlah baris dan kolom pada Dataframe**
"""

gold_data.shape

"""Berkas data ini berformat Comma Separated Value (CSV) dengan 2290 baris dan 6 kolom. Berkas ini berisi 5 kolom yang memiliki tipe data numerik, dan satu kolom dengan tipe data tanggal. Data dengan jelas menampilkan nilai variabel-variabel SPX, GLD, USO, SLV, EUR/USD terhadap kolom tanggal.

Penjelasan Variable:

1. SPX    
adalah S&P 500 Index, yang merupakan indeks pasar saham yang mengukur kinerja 500 perusahaan terbesar yang terdaftar di bursa saham Amerika Serikat. SPX adalah salah satu indeks pasar saham paling berpengaruh di dunia.

2. GLD   
adalah SPDR Gold Shares, yang merupakan exchange-traded fund (ETF) yang berinvestasi pada emas fisik. GLD adalah salah satu ETF emas terbesar di dunia.

3. USO   
adalah United States Oil Fund, yang merupakan ETF yang berinvestasi pada kontrak berjangka minyak mentah West Texas Intermediate (WTI). USO adalah salah satu ETF minyak terbesar di dunia.

4. SLV    
adalah iShares Silver Trust, yang merupakan ETF yang berinvestasi pada perak fisik. SLV adalah salah satu ETF perak terbesar di dunia.

5. EUR/USD   
adalah pasangan mata uang euro terhadap dolar AS. EUR/USD adalah salah satu pasangan mata uang paling likuid di dunia.

6. DATE    
adalah tanggal yang menjadi patokan pengukuran harga emas.

**Menampilkan informasi singkat dari dataframe**
"""

gold_data.info()

"""**Menampilkan deskripsi statistik dataframe**"""

gold_data.describe()

"""**Menampilkan korelasi antar variable**"""

correlation = gold_data.corr()
correlation

"""**Visualisasi korelasi antar variable dengan heatmap**"""

import matplotlib.pyplot as plt
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':10}, cmap='Greens')

"""**Visualisasi pola korelasi dengan pairplot**"""

sns.pairplot(gold_data[['SPX','SLV','USO', 'GLD', 'EUR/USD']], plot_kws={"s": 5})

"""**Memisahkan tanggal, bulan dan tahun dalam kolom "Date"**"""

gold_data['Date'] = pd.to_datetime(gold_data['Date'])
gold_data['Day'] = gold_data['Date'].dt.day
gold_data['Month'] = gold_data['Date'].dt.month
gold_data['Year'] = gold_data['Date'].dt.year

gold_data = gold_data.drop(['Date'], axis=1)
gold_data = gold_data[['Day', 'Month', 'Year','SPX', 'GLD', 'USO', 'SLV', 'EUR/USD']]
gold_data

"""**Menghitung rata-rata harga emas per tahun**"""

average_prices_per_year = gold_data.groupby('Year')['GLD'].mean().reset_index()
average_prices_per_year

"""**Menampilkan Missing Value**"""

gold_data.isna().sum()

"""**Menampilkan Duplicated Data**"""

gold_data.duplicated().sum()

"""**Menampilkan Outlier**"""

Q1 = gold_data['GLD'].quantile(0.25)
Q3 = gold_data['GLD'].quantile(0.75)

iqr = Q3 - Q1

lower_bound = Q1 - 1.5 * iqr
upper_bound = Q3 + 1.5 * iqr

outliers1 = gold_data[gold_data['GLD'] < lower_bound]
outliers2 = gold_data[gold_data['GLD'] > upper_bound]

print(outliers1)
print(outliers2)

"""**Membersihkan Outler**"""

gold_data.loc[gold_data['GLD'] < lower_bound, 'GLD'] = gold_data['GLD'].median()
gold_data.loc[gold_data['GLD'] > upper_bound, 'GLD'] = gold_data['GLD'].median()

print(gold_data)

"""# **Data Training**

**Memisahkan Fitur dan Target**
"""

X = gold_data.drop(['Day', 'Month', 'Year', 'GLD'],axis=1)
y = gold_data['GLD']

"""**Train Test Split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=2)

"""**Normalisasi Data**"""

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

print(X_train_scaled[:5])
print(X_test_scaled[:5])

"""**Model Linear Regression**"""

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

param_grid = {'copy_X': [True, False],
              'fit_intercept': [True, False],
              'n_jobs': [None],
              'positive': [True, False]}

grid_search = GridSearchCV(lin_reg,
                           param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X, y)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print(f'Parameter terbaik untuk model Linear Regression adalah: {best_params}')
print(f'Skor Mean Squared Error (MSE) terbaik untuk model Regresi Linear adalah: {best_score}')

"""**Model SVM Regressor**"""

svr = SVR()

svr.fit(X_train, y_train)

param_grid = {'C': [1.0, 2.0],
              'cache_size': [100, 200],
              'coef0': [0.0, 0.1],
              'degree': [1, 3],
              'epsilon': [0.1, 0,2],
              'gamma': ['scale'],
              'kernel': ['rbf'],
              'max_iter': [-1],
              'shrinking': [True],
              'tol': [0.001, 0.01],
              'verbose': [False]}

grid_search = GridSearchCV(svr,
                           param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X, y)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print(f'Parameter terbaik untuk model SVM Regressor adalah: {best_params}')
print(f'Skor Mean Squared Error (MSE) terbaik untuk model SVM Regressor adalah: {best_score}')

"""# **Evaluation**

**Menghitung MAE, MSE, R2**
"""

metrics = pd.DataFrame(index=['Linear Regression','SVM Regressor'])

model_dict = {'Linear Regression': lin_reg, 'SVM Regressor': svr}

for name, model in model_dict.items():
    mae_train = mean_absolute_error(y_true=y_train, y_pred=model.predict(X_train))
    mae_test = mean_absolute_error(y_true=y_test, y_pred=model.predict(X_test))

    mse_train = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))
    mse_test = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))

    r2_train = r2_score(y_true=y_train, y_pred=model.predict(X_train))
    r2_test = r2_score(y_true=y_test, y_pred=model.predict(X_test))

    metrics.loc[name, 'MAE Train'] = round(mae_train, 3)
    metrics.loc[name, 'MAE Test'] = round(mae_test, 3)
    metrics.loc[name, 'MSE Train'] = round(mse_train, 3)
    metrics.loc[name, 'MSE Test'] = round(mse_test, 3)
    metrics.loc[name, 'R2 Train'] = round(r2_train, 3)
    metrics.loc[name, 'R2 Test'] = round(r2_test, 3)

display(metrics)

"""**Menampilkan Plot Metric Evaluasi**"""

fig, axes = plt.subplots(2, 3, figsize=(18, 6))
colors = {'Linear Regression': 'blue', 'SVM Regressor': 'red'}


axes[0,0].bar(metrics.index, metrics['MAE Train'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[0,0].set_ylabel('MAE Value')
axes[0,0].set_title('MAE Train (Linear Regression vs SVM Regressor)')


axes[0,1].bar(metrics.index, metrics['MSE Train'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[0,1].set_ylabel('MSE Value')
axes[0,1].set_title('MSE Train (Linear Regression vs SVM Regressor)')


axes[0,2].bar(metrics.index, metrics['R2 Train'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[0,2].set_ylabel('R2 Value')
axes[0,2].set_title('R2 Train (Linear Regression vs SVM Regressor)')


axes[1,0].bar(metrics.index, metrics['MAE Test'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[1,0].set_ylabel('MAE Value')
axes[1,0].set_title('MAE Test (Linear Regression vs SVM Regressor)')


axes[1,1].bar(metrics.index, metrics['MSE Test'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[1,1].set_ylabel('MSE Value')
axes[1,1].set_title('MSE Test (Linear Regression vs SVM Regressor)')


axes[1,2].bar(metrics.index, metrics['R2 Test'].values, color=[colors['Linear Regression'], colors['SVM Regressor']])
axes[1,2].set_ylabel('R2 Value')
axes[1,2].set_title('R2 Test (Linear Regression vs SVM Regressor)')


plt.tight_layout()

plt.show()

"""Kesimpulan:
Berdasarkan hasil modeling dan evaluasi seperti yang ditampilkan pada bar plot di atas, model terbaik untuk diterapkan pada dataset ini adalah **Support Vector Machine Regressor**

**Melakukan prediksi pada baris pertama data testing**
"""

pred = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict[name] = model.predict(pred).round(3)

pd.DataFrame(pred_dict)